import { useEskulStore } from "@/stores/eskulStore";
import { KELOMPOK_KELAS } from "@/config/kelas";
import { useQRGenerator } from "@/hooks/useQRGenerator";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { format } from "date-fns";
import type { Absensi } from "@/types/eskul.types";

const AbsensiQR = () => {
  const { kelasAktif, siswa, absensi, absenSiswa } = useEskulStore((state) => ({
    kelasAktif: state.kelasAktif,
    siswa: state.siswa,
    absensi: state.absensi,
    absenSiswa: state.absenSiswa,
  }));

  const today = format(new Date(), "yyyy-MM-dd");

  const qrData = kelasAktif ? {
    kelasId: kelasAktif,
    tanggal: today,
    timestamp: Date.now(),
  } : null;

  const { qrCodeUrl } = useQRGenerator(qrData);

  if (!kelasAktif) {
    return null;
  }

  const siswaDiKelas = Object.values(siswa).filter(s => s.kelasId === kelasAktif);
  const absensiHariIni = Object.values(absensi).flat().filter(a => a.kelasId === kelasAktif && a.tanggal === today);

  const getStatusSiswa = (siswaId: string) => {
    return absensiHariIni.find(a => a.siswaId === siswaId)?.status;
  };

  const handleAbsen = (siswaId: string, checked: boolean) => {
    const status = checked ? 'hadir' : 'absen';
    const absensiRecord: Absensi = {
      id: '', // will be generated by store
      siswaId,
      kelasId: kelasAktif,
      tanggal: today,
      waktu: format(new Date(), 'HH:mm:ss'),
      status: status,
    };
    // Note: This is a simplified implementation. A real app would need to handle "izin" and prevent overwriting existing status without confirmation.
    absenSiswa(absensiRecord);
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Absensi QR & Manual</CardTitle>
        <CardDescription>
          Scan QR untuk absensi otomatis atau lakukan absensi manual di bawah. Tanggal: {today}
        </CardDescription>
      </CardHeader>
      <CardContent className="grid gap-6 md:grid-cols-2">
        <div className="flex flex-col items-center justify-center space-y-4">
          {qrCodeUrl ? (
            <img src={qrCodeUrl} alt="QR Code Absensi" className="rounded-lg" />
          ) : (
            <div className="w-64 h-64 bg-gray-200 rounded-lg flex items-center justify-center">
              <p className="text-muted-foreground">Generating QR...</p>
            </div>
          )}
          <p className="text-center text-muted-foreground">Siswa dapat melakukan scan menggunakan kamera HP.</p>
        </div>
        <div className="space-y-4">
          <h4 className="font-semibold">Absensi Manual Kelas {KELOMPOK_KELAS[kelasAktif].nama}</h4>
          <div className="max-h-64 overflow-y-auto space-y-2 pr-4">
            {siswaDiKelas.length > 0 ? (
              siswaDiKelas.map(s => {
                const status = getStatusSiswa(s.id);
                return (
                  <div key={s.id} className="flex items-center space-x-2">
                    <Checkbox
                      id={`absen-${s.id}`}
                      checked={status === 'hadir'}
                      onCheckedChange={(checked) => handleAbsen(s.id, !!checked)}
                    />
                    <Label htmlFor={`absen-${s.id}`} className="flex-grow">{s.nama}</Label>
                    {status && <span className={`text-xs font-bold ${status === 'hadir' ? 'text-green-500' : 'text-red-500'}`}>{status.toUpperCase()}</span>}
                  </div>
                )
              })
            ) : (
              <p className="text-muted-foreground">Tidak ada siswa di kelas ini.</p>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default AbsensiQR;
